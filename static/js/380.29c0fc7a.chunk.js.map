{"version":3,"file":"static/js/380.29c0fc7a.chunk.js","mappings":"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","sources":["views/dashboard/Dashboard.tsx"],"sourcesContent":["import React, { useEffect } from 'react'\n\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardGroup,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from '@coreui/react'\n\nimport {\n  defineFileAction,\n  ChonkyActions,\n  ChonkyFileActionData,\n  FileArray,\n  FileBrowser,\n  FileContextMenu,\n  FileData,\n  FileList,\n  FileNavbar,\n  FileToolbar,\n  setChonkyDefaults,\n} from 'chonky'\n\nimport { ChonkyIconFA } from 'chonky-icon-fontawesome'\nimport { useCallback, useState } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  getUserStorageEntries,\n  keyNameFromPath,\n  lastKeyNameFromPath,\n  readEntry,\n  storageEntryToJSON,\n} from 'src/lib'\nimport { StorageEntry } from 'src/proto_js/colink_pb'\nimport { createDownloadHref } from 'src/utils'\n\nsetChonkyDefaults({ iconComponent: ChonkyIconFA })\n\nexport function getPrefixFromPath(path: string) {\n  return path.substring(0, path.indexOf('@'))\n}\n\nexport function isDirectory(path: string) {\n  return path.slice(-2) === '@0'\n}\n\nconst getNewFiles = async (path: string, getFiles: Function): Promise<FileArray> => {\n  let prefix: string = getPrefixFromPath(path)\n  let files: FileArray = []\n  await getFiles(prefix).then((keys: string[]) => {\n    files = Array.from(keys).map((key: string) => {\n      let entry: FileData = {\n        id: key,\n        name: lastKeyNameFromPath(key),\n        isDir: isDirectory(key),\n        isHidden: false,\n      }\n      return entry\n    })\n  })\n  return Promise.resolve(files)\n}\n\nconst getFolderChain = async (path: string): Promise<FileArray> => {\n  let rootEntry: FileData = {\n    id: '@',\n    name: 'root',\n    isHidden: false,\n    isDir: true,\n  }\n  const folderChain = []\n\n  const start = path.substring(0, path.indexOf('::')) + '::'\n  let end = path.substring(path.indexOf('::') + 2)\n\n  while (end !== '') {\n    let fullPath = start + end\n    let entry: FileData = {\n      id: fullPath,\n      name: lastKeyNameFromPath(fullPath),\n      isDir: isDirectory(fullPath),\n      isHidden: false,\n    }\n    folderChain.unshift(entry)\n\n    let lastIndex = end.lastIndexOf(':')\n    if (lastIndex !== -1) {\n      end = end.substring(0, lastIndex) + '@0'\n    } else {\n      end = ''\n    }\n  }\n\n  folderChain.unshift(rootEntry)\n\n  return Promise.resolve(folderChain)\n}\n\nexport const useFileActionHandler = (setPath: Function, displayEntry: Function) => {\n  return useCallback(\n    (data: ChonkyFileActionData) => {\n      if (data.id === ChonkyActions.OpenFiles.id) {\n        if (typeof data.payload.targetFile !== 'undefined') {\n          if (data.payload.targetFile.isDir) {\n            // go to next path/series of entries\n            setPath(data.payload.targetFile.id)\n          } else {\n            displayEntry(keyNameFromPath(data.payload.targetFile.id))\n          }\n        }\n      }\n    },\n    [setPath],\n  )\n}\n\nconst test = defineFileAction({\n  id: 'testPrint',\n  requiresSelection: true,\n  button: {\n    name: 'Test',\n    toolbar: true,\n    group: 'Options',\n  },\n})\n\nconst myFileActions = [test]\n\nconst ReadOnlyVFSBrowser: React.FC<{\n  instanceId: string\n  path: string\n  setPath: Function\n  getKeys: Function\n  displayEntry: Function\n}> = (props) => {\n  const [files, setFiles] = useState<FileArray<FileData>>([])\n  const [folderChain, setFolderChain] = useState<FileArray<FileData>>([])\n\n  useEffect(() => {\n    async function updateFolderChain() {\n      await getFolderChain(props.path).then((chain: FileArray) => {\n        setFolderChain([...chain])\n      })\n      return true\n    }\n    async function updateFiles() {\n      await getNewFiles(props.path, props.getKeys).then((files: FileArray) => {\n        setFiles([...files])\n      })\n      return true\n    }\n    updateFiles()\n    updateFolderChain()\n  }, [props.path])\n\n  const handleFileAction = useFileActionHandler(props.setPath, props.displayEntry)\n  return (\n    <div style={{ height: 400 }}>\n      <FileBrowser\n        instanceId={props.instanceId}\n        files={files}\n        fileActions={myFileActions}\n        folderChain={folderChain}\n        onFileAction={handleFileAction}\n        thumbnailGenerator={(file: FileData) => null}\n      >\n        <FileNavbar />\n        <FileToolbar />\n        <FileList />\n        <FileContextMenu />\n      </FileBrowser>\n    </div>\n  )\n}\n\nconst Dashboard: React.FC = () => {\n  const { jwt } = useSelector((state: any) => state.jwt)\n  const { client } = useSelector((state: any) => state.client)\n  const dispatch = useDispatch()\n\n  // Keep track of current key path for file navigation\n  const [path, setPath] = useState('')\n\n  // Variables for displaying entry information\n  const defEmpty = new StorageEntry()\n  const [entry, updateDisplay] = useState(defEmpty)\n  const [visible, updateVisible] = useState(false)\n  const [isString, updateB64] = useState(true)\n\n  async function getKeysAtPrefix(prefix: string) {\n    let paths: string[] = []\n    if (prefix === '') {\n      await getUserStorageEntries(client, jwt).then((entries: StorageEntry[]) => {\n        paths = entries.map((entry: StorageEntry) => {\n          return entry.getKeyPath()\n        })\n      })\n    } else {\n      await getUserStorageEntries(client, jwt, prefix).then((entries: StorageEntry[]) => {\n        paths = entries.map((entry: StorageEntry) => {\n          return entry.getKeyPath()\n        })\n      })\n    }\n    return Promise.resolve(paths)\n  }\n\n  async function displayEntry(keyName: string) {\n    await readEntry(client, jwt, keyName).then((entry: StorageEntry) => {\n      updateDisplay(entry)\n      updateVisible(true)\n    })\n  }\n\n  useEffect(() => {\n    if (jwt !== '' && client !== '') {\n      setPath('@')\n    }\n  }, [jwt, client])\n\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        <CCardBody>\n          <CRow>\n            <CCol sm={5}>\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\n                Storage Entries\n              </h4>\n            </CCol>\n          </CRow>\n        </CCardBody>\n        <CCardFooter>\n          <CRow className=\"text-center\">\n            <ReadOnlyVFSBrowser\n              instanceId=\"ah\"\n              path={path}\n              setPath={setPath}\n              getKeys={getKeysAtPrefix}\n              displayEntry={displayEntry}\n            />\n          </CRow>\n        </CCardFooter>\n      </CCard>\n\n      <CModal\n        size=\"lg\"\n        backdrop=\"static\"\n        style={{ maxWidth: '75%', marginLeft: '12.5%' }}\n        visible={visible}\n        onClose={() => updateVisible(false)}\n        alignment=\"center\"\n      >\n        <CModalHeader>\n          <CModalTitle>Entry: {visible ? lastKeyNameFromPath(entry.getKeyPath()) : ''}</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <CCardGroup>\n            <CCard></CCard>\n          </CCardGroup>\n          <CCardGroup>\n            <CCard className=\"p-2\">\n              <CCardBody className=\"text-center\">\n                <div\n                  style={{\n                    whiteSpace: 'pre-wrap',\n                    textAlign: 'left',\n                    overflowWrap: 'break-word',\n                    width: '100%',\n                  }}\n                >\n                  {visible ? JSON.stringify(storageEntryToJSON(entry, isString), null, 2) : ''}\n                </div>\n                <CButton className=\"ms-2\" active tabIndex={-1} color=\"info\">\n                  <a\n                    download=\"payload.txt\"\n                    href={\n                      visible\n                        ? createDownloadHref(\n                            JSON.stringify(storageEntryToJSON(entry, isString), null, 2),\n                          )\n                        : '#'\n                    }\n                  >\n                    Download Entry\n                  </a>\n                </CButton>\n              </CCardBody>\n            </CCard>\n          </CCardGroup>\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={() => updateVisible(false)}>\n            Close\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  )\n}\n\nexport default Dashboard\n"],"names":["getPrefixFromPath","path","substring","indexOf","isDirectory","slice","setChonkyDefaults","iconComponent","ChonkyIconFA","getNewFiles","getFiles","prefix","files","then","keys","Array","from","map","key","id","name","lastKeyNameFromPath","isDir","isHidden","Promise","resolve","getFolderChain","rootEntry","folderChain","start","end","entry","fullPath","unshift","lastIndex","lastIndexOf","useFileActionHandler","setPath","displayEntry","useCallback","data","ChonkyActions","payload","targetFile","keyNameFromPath","myFileActions","defineFileAction","requiresSelection","button","toolbar","group","ReadOnlyVFSBrowser","props","useState","setFiles","setFolderChain","useEffect","chain","getKeys","updateFiles","updateFolderChain","handleFileAction","style","height","instanceId","fileActions","onFileAction","thumbnailGenerator","file","jwt","useSelector","state","client","useDispatch","defEmpty","StorageEntry","updateDisplay","visible","updateVisible","isString","paths","getUserStorageEntries","entries","getKeyPath","keyName","readEntry","className","sm","size","backdrop","maxWidth","marginLeft","onClose","alignment","whiteSpace","textAlign","overflowWrap","width","JSON","stringify","storageEntryToJSON","active","tabIndex","color","download","href","createDownloadHref","onClick"],"sourceRoot":""}