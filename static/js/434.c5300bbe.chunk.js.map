{"version":3,"file":"static/js/434.c5300bbe.chunk.js","mappings":"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","sources":["../node_modules/@coreui/icons/js/free/cil-globe-alt.js","views/pages/login/Login.tsx"],"sourcesContent":["export const cilGlobeAlt = [\"512 512\",\"<path fill='var(--ci-primary-color, currentColor)' d='M256,16C123.452,16,16,123.452,16,256S123.452,496,256,496,496,388.548,496,256,388.548,16,256,16ZM175.047,447.667A208.26,208.26,0,0,1,64.333,175.047c1.018-2.408,2.092-4.785,3.2-7.145L120,215.126v63.235L197.1,360H236v49.047l-47.052,43.915Q181.926,450.568,175.047,447.667Zm228.031-44.589A207.253,207.253,0,0,1,256,464a210.4,210.4,0,0,1-29.722-2.107L268,422.953V328H210.9L152,265.639V200.874L83.7,139.408a209.259,209.259,0,0,1,91.343-75.075A207.793,207.793,0,0,1,371.3,82.839l-45.564,58.582,15.49,38.725-10.485,10.485-78.618-15.723L208,208v88H384l50.345,67.126A208.127,208.127,0,0,1,403.078,403.078ZM464,256a206.763,206.763,0,0,1-13.873,74.837L400,264H240V224l19.877-14.908,81.382,16.277,37.515-37.515-16.51-41.275,34.2-43.977q3.361,3.084,6.61,6.32A207.253,207.253,0,0,1,464,256Z' class='ci-primary'/>\"]","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport {\n  CAlert,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCardHeader,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CFormSelect,\n  CFormTextarea,\n  CInputGroup,\n  CInputGroupText,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilGlobeAlt, cilLockLocked, cilUser } from '@coreui/icons'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setClient, setJwt, setAdmin, readFromFile } from 'src/utils'\nimport {\n  generateJwtMetaMask,\n  getUserConsentMM,\n  generateToken,\n  UserData,\n  Consent,\n  validateJwtAndPrivilege,\n  verifyClient,\n} from 'src/lib'\n\nconst Login = () => {\n  // Disables custom URLs if default selected\n  const [isDefault, setDefault] = useState(false)\n\n  // Panel to configure JWT\n  const [visibleJwt, setVisibleJwt] = useState(false)\n\n  // For getting admin JWT on initial MetaMask request\n  const [visibleMM, setVisibleMM] = useState(false)\n\n  // Toggle loading panel\n  const [visibleLoad, setVisibleLoad] = useState(false)\n  const [errorState, setErrorState] = useState(false)\n\n  // Temp value storage (before commiting to local storage)\n  const [address, setLocalAddress] = useState('')\n  const [localJwt, setLocalJwt] = useState('')\n  const [consentMM, setConsentMM] = useState({} as Consent)\n  const [localJwtMM, setLocalJwtMM] = useState('')\n\n  const { client } = useSelector((state: any) => state.client)\n  const dispatch = useDispatch()\n\n  async function loginWithJwt(jwt: string) {\n    await validateJwtAndPrivilege(client, jwt).then((status: string) => {\n      if (status !== 'invalid') {\n        dispatch(setJwt(jwt))\n        localStorage.setItem('jwt', jwt)\n        if (status === 'user') {\n          dispatch(setAdmin(false))\n          localStorage.setItem('isAdmin', 'false')\n        } else {\n          dispatch(setAdmin(true))\n          localStorage.setItem('isAdmin', 'true')\n        }\n      } else {\n        alert('Error: Invalid JWT or hostname.')\n      }\n    })\n  }\n\n  async function loginWithMetaMask() {\n    let consent: Consent = await getUserConsentMM(client, { authorization: '' })\n    await generateToken(client, '', consent)\n      .then((token: string) => {\n        loginWithJwt(token)\n      })\n      .catch(async (err: Error) => {\n        setConsentMM(consent)\n        setVisibleMM(true)\n      })\n  }\n\n  async function createMetaMask(jwt: string) {\n    await generateJwtMetaMask(client, jwt, consentMM)\n      .then((data: UserData) => {\n        loginWithJwt(data.userJwt)\n        setVisibleMM(false)\n        setVisibleJwt(false)\n      })\n      .catch((err: Error) => {\n        alert(err)\n      })\n  }\n\n  return (\n    <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md={5}>\n            <CCard>\n              <CCardHeader className=\"text-center p-4\">\n                <h1>CoLink Login</h1>\n              </CCardHeader>\n              <CCardBody className=\"text-center p-4\">\n                <CForm>\n                  <h4>Official Server</h4>\n                  <p className=\"text-medium-emphasis mb-3\" style={{ fontSize: '18px' }}>\n                    Connect to an official CoLink server from the list of servers below:\n                  </p>\n                  <CInputGroup className=\"mb-4\" style={{ width: '80%', marginLeft: '10%' }}>\n                    <CInputGroupText>\n                      <CIcon icon={cilGlobeAlt} />\n                    </CInputGroupText>\n                    <CFormSelect\n                      className=\"mx-auto\"\n                      style={{ width: '80%' }}\n                      aria-label=\"Default select\"\n                      options={[\n                        { label: '', value: '' },\n                        {\n                          label: 'https://test-1.colink-server.colearn.cloud/',\n                          value: 'https://test-1.colink-server.colearn.cloud/',\n                        },\n                        {\n                          label: 'https://test-2.colink-server.colearn.cloud/',\n                          value: 'https://test-2.colink-server.colearn.cloud/',\n                        },\n                      ]}\n                      onChange={(e) => {\n                        setLocalAddress(e.target.value)\n                        if (e.target.value !== '') {\n                          setDefault(true)\n                        } else {\n                          setDefault(false)\n                        }\n                      }}\n                    />\n                  </CInputGroup>\n                  <div className=\"d-flex justify-content-center mb-2\">\n                    <div\n                      style={{\n                        width: '100%',\n                        textAlign: 'center',\n                        borderBottom: '1px solid lightgray',\n                        lineHeight: '0.1em',\n                        margin: '10px 0 20px',\n                      }}\n                    >\n                      <span style={{ background: '#fff', padding: '0 15px' }}>OR</span>\n                    </div>\n                  </div>\n                  <h4>Custom Server</h4>\n                  <p className=\"text-medium-emphasis mb-3\" style={{ fontSize: '18px' }}>\n                    Specify a custom CoLink server address to connect to:\n                  </p>\n                  <CInputGroup className=\"mb-3\" style={{ width: '80%', marginLeft: '10%' }}>\n                    <CInputGroupText>\n                      <CIcon icon={cilGlobeAlt} />\n                    </CInputGroupText>\n                    <CFormInput\n                      disabled={isDefault}\n                      placeholder=\"Custom Address\"\n                      onChange={(e) => {\n                        setLocalAddress(e.target.value)\n                      }}\n                    />\n                  </CInputGroup>\n                </CForm>\n                <CButton\n                  color=\"primary\"\n                  active\n                  tabIndex={-1}\n                  onClick={async () => {\n                    setErrorState(false)\n                    setVisibleLoad(true)\n                    if (await verifyClient(address)) {\n                      setVisibleLoad(false)\n                      setVisibleJwt(true)\n                      dispatch(setClient(address))\n                      localStorage.setItem('address', address)\n                    } else {\n                      setErrorState(true)\n                    }\n                  }}\n                >\n                  Connect\n                </CButton>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n\n      {/* Display error message if client invalid */}\n      <CModal\n        backdrop=\"static\"\n        visible={visibleLoad}\n        onClose={() => setVisibleLoad(false)}\n        alignment=\"center\"\n      >\n        <CModalBody>\n          <CCardGroup>\n            <CCard className=\"p-2\">\n              <CCardBody className=\"text-center\">\n                {errorState ? (\n                  <>\n                    <p className=\"text-medium-emphasis mb-3\" style={{ fontSize: '18px' }}>\n                      Error connecting to the server. Please specify a different address.\n                    </p>\n                    <CButton\n                      color=\"primary\"\n                      active\n                      tabIndex={-1}\n                      onClick={() => {\n                        setVisibleLoad(false)\n                        setErrorState(false)\n                        setLocalAddress('')\n                      }}\n                    >\n                      Close\n                    </CButton>\n                  </>\n                ) : (\n                  <>\n                    <p className=\"text-medium-emphasis mb-3\" style={{ fontSize: '18px' }}>\n                      Connecting to server...\n                    </p>\n                    <CButton\n                      color=\"primary\"\n                      active\n                      tabIndex={-1}\n                      onClick={() => {\n                        setVisibleLoad(false)\n                      }}\n                    >\n                      Cancel\n                    </CButton>\n                  </>\n                )}\n              </CCardBody>\n            </CCard>\n          </CCardGroup>\n        </CModalBody>\n      </CModal>\n\n      {/* Get JWT/Metamask info with valid client */}\n      <CModal\n        size=\"xl\"\n        backdrop=\"static\"\n        visible={visibleJwt}\n        onClose={() => setVisibleJwt(false)}\n        alignment=\"center\"\n      >\n        <CModalHeader>\n          <CModalTitle>Specify your JWT or use Metamask to connect to the server.</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <CCardGroup>\n            <CCard className=\"p-4\">\n              <CCardBody className=\"text-center\">\n                <CForm>\n                  <h2>JWT</h2>\n                  <p className=\"mt-3 text-medium-emphasis\">\n                    Upload your JWT as a text file or manually paste it in the box below.\n                  </p>\n                  <div className=\"mb-3\">\n                    <CFormInput\n                      style={{ width: '55%' }}\n                      className=\"mx-auto\"\n                      type=\"file\"\n                      id=\"formFile\"\n                      onChange={(e) => {\n                        readFromFile(e, setLocalJwt)\n                      }}\n                    />\n                  </div>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupText>JWT</CInputGroupText>\n                    <CFormTextarea\n                      aria-label=\"text input\"\n                      style={{ resize: 'none', height: '150px' }}\n                      value={localJwt}\n                      onChange={(e) => {\n                        setLocalJwt(e.target.value)\n                      }}\n                    ></CFormTextarea>\n                  </CInputGroup>\n                </CForm>\n                <CButton\n                  color=\"primary\"\n                  active\n                  tabIndex={-1}\n                  onClick={() => loginWithJwt(localJwt)}\n                >\n                  Confirm\n                </CButton>\n              </CCardBody>\n            </CCard>\n            <CCard className=\"p-4\" style={{ width: '30%' }}>\n              <CCardBody className=\"text-center\">\n                <div>\n                  <h2>Metamask</h2>\n                  <p className=\"mt-3 mb-3 text-medium-emphasis\">\n                    Connect your Metamask wallet using the button below. <br /> Note: if you have\n                    not registered a Metamask account, you must provide an admin JWT to register it.\n                  </p>\n                  <CButton active tabIndex={-1} onClick={() => loginWithMetaMask()}>\n                    Connect Wallet\n                  </CButton>\n                </div>\n              </CCardBody>\n            </CCard>\n          </CCardGroup>\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={() => setVisibleJwt(false)}>\n            Close\n          </CButton>\n        </CModalFooter>\n      </CModal>\n\n      <CModal\n        size=\"lg\"\n        backdrop=\"static\"\n        style={{ maxWidth: '75%', marginLeft: '12.5%' }}\n        visible={visibleMM}\n        onClose={() => setVisibleMM(false)}\n        alignment=\"center\"\n      >\n        <CModalHeader>\n          <CModalTitle>Account not Registered</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <CCardGroup>\n            <CCard className=\"p-4\">\n              <CCardBody className=\"text-center\">\n                <CForm>\n                  <h2>JWT</h2>\n                  <p className=\"mt-3 text-medium-emphasis\">\n                    Provide an admin JWT to register your new MetaMask account!\n                  </p>\n                  <div className=\"mb-3\">\n                    <CFormInput\n                      style={{ width: '55%' }}\n                      className=\"mx-auto\"\n                      type=\"file\"\n                      id=\"formFile\"\n                      onChange={(e) => {\n                        readFromFile(e, setLocalJwtMM)\n                      }}\n                    />\n                  </div>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupText>JWT</CInputGroupText>\n                    <CFormTextarea\n                      aria-label=\"text input\"\n                      style={{ resize: 'none', height: '100px' }}\n                      value={localJwtMM}\n                      onChange={(e) => {\n                        setLocalJwtMM(e.target.value)\n                      }}\n                    ></CFormTextarea>\n                  </CInputGroup>\n                </CForm>\n                <CButton\n                  color=\"primary\"\n                  active\n                  tabIndex={-1}\n                  onClick={() => createMetaMask(localJwtMM)}\n                >\n                  Confirm\n                </CButton>\n              </CCardBody>\n            </CCard>\n          </CCardGroup>\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={() => setVisibleJwt(false)}>\n            Close\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </div>\n  )\n}\n\nexport default Login\n"],"names":["cilGlobeAlt","useState","isDefault","setDefault","visibleJwt","setVisibleJwt","visibleMM","setVisibleMM","visibleLoad","setVisibleLoad","errorState","setErrorState","address","setLocalAddress","localJwt","setLocalJwt","consentMM","setConsentMM","localJwtMM","setLocalJwtMM","client","useSelector","state","dispatch","useDispatch","loginWithJwt","jwt","validateJwtAndPrivilege","then","status","setJwt","localStorage","setItem","setAdmin","alert","getUserConsentMM","authorization","consent","generateToken","token","catch","err","generateJwtMetaMask","data","userJwt","className","md","style","fontSize","width","marginLeft","icon","options","label","value","onChange","e","target","textAlign","borderBottom","lineHeight","margin","background","padding","disabled","placeholder","color","active","tabIndex","onClick","verifyClient","setClient","backdrop","visible","onClose","alignment","size","type","id","readFromFile","resize","height","loginWithMetaMask","maxWidth","createMetaMask"],"sourceRoot":""}