{"version":3,"file":"static/js/380.d0988df4.chunk.js","mappings":"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","sources":["views/dashboard/Dashboard.tsx"],"sourcesContent":["import React, { useEffect } from 'react'\n\nimport {\n  CAvatar,\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CProgress,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport {\n  cibCcAmex,\n  cibCcApplePay,\n  cibCcMastercard,\n  cibCcPaypal,\n  cibCcStripe,\n  cibCcVisa,\n  cibGoogle,\n  cibFacebook,\n  cibLinkedin,\n  cifBr,\n  cifEs,\n  cifFr,\n  cifIn,\n  cifPl,\n  cifUs,\n  cibTwitter,\n  cilCloudDownload,\n  cilPeople,\n  cilUser,\n  cilUserFemale,\n} from '@coreui/icons'\n\nimport {\n  defineFileAction,\n  ChonkyActions,\n  ChonkyFileActionData,\n  FileArray,\n  FileBrowser,\n  FileContextMenu,\n  FileData,\n  FileHelper,\n  FileList,\n  FileNavbar,\n  FileToolbar,\n  setChonkyDefaults,\n} from 'chonky'\n\nimport { ChonkyIconFA } from 'chonky-icon-fontawesome'\nimport { useCallback, useMemo, useState } from 'react'\n\nimport DemoFsMap from './demo.fs_map.json'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getUserStorageEntries, keyNameFromPath } from 'src/lib'\nimport { StorageEntry } from 'src/proto_js/colink_pb'\n\nsetChonkyDefaults({ iconComponent: ChonkyIconFA })\n\nexport function getPrefixFromPath(path: string) {\n  return path.substring(0, path.indexOf('@'))\n}\n\nexport function isDirectory(path: string) {\n  return path.slice(-2) === '@0'\n}\n\nconst getNewFiles = async (path: string, getFiles: Function): Promise<FileArray> => {\n  let prefix: string = getPrefixFromPath(path)\n  let files: FileArray = []\n  await getFiles(prefix).then((keys: string[]) => {\n    console.log(keys)\n    files = Array.from(keys).map((key: string) => {\n      let entry: FileData = {\n        id: key,\n        name: keyNameFromPath(key),\n        isDir: isDirectory(key),\n        isHidden: false,\n      }\n      return entry\n    })\n  })\n  return Promise.resolve(files)\n}\n\nconst getFolderChain = async (path: string): Promise<FileArray> => {\n  let rootEntry: FileData = {\n    id: '@',\n    name: 'root',\n    isHidden: false,\n    isDir: true,\n  }\n  const folderChain = []\n\n  const start = path.substring(0, path.indexOf('::')) + '::'\n  let end = path.substring(path.indexOf('::') + 2)\n\n  while (end !== '') {\n    let fullPath = start + end\n    let entry: FileData = {\n      id: fullPath,\n      name: keyNameFromPath(fullPath),\n      isHidden: false,\n      isDir: isDirectory(fullPath),\n    }\n    folderChain.unshift(entry)\n\n    let lastIndex = end.lastIndexOf(':')\n    if (lastIndex !== -1) {\n      end = end.substring(0, lastIndex) + '@0'\n    } else {\n      end = ''\n    }\n  }\n\n  folderChain.unshift(rootEntry)\n\n  return Promise.resolve(folderChain)\n}\n\nexport const useFileActionHandler = (setPath: Function) => {\n  return useCallback(\n    (data: ChonkyFileActionData) => {\n      if (data.id === ChonkyActions.OpenFiles.id) {\n        if (typeof data.payload.targetFile !== 'undefined') {\n          setPath(data.payload.targetFile.id)\n        }\n      }\n    },\n    [setPath],\n  )\n}\n\nconst test = defineFileAction({\n  id: 'testPrint',\n  requiresSelection: true,\n  button: {\n    name: 'Test',\n    toolbar: true,\n    group: 'Options',\n  },\n})\n\nconst myFileActions = [test]\n\nconst ReadOnlyVFSBrowser: React.FC<{\n  instanceId: string\n  path: string\n  setPath: Function\n  getKeys: Function\n}> = (props) => {\n  const [files, setFiles] = useState<FileArray<FileData>>([])\n  const [folderChain, setFolderChain] = useState<FileArray<FileData>>([])\n\n  useEffect(() => {\n    async function updateFolderChain() {\n      await getFolderChain(props.path).then((chain: FileArray) => {\n        setFolderChain([...chain])\n      })\n      return true\n    }\n    async function updateFiles() {\n      await getNewFiles(props.path, props.getKeys).then((files: FileArray) => {\n        setFiles([...files])\n      })\n      return true\n    }\n    updateFiles()\n    updateFolderChain()\n  }, [props.path])\n\n  const handleFileAction = useFileActionHandler(props.setPath)\n  return (\n    <div style={{ height: 400 }}>\n      <FileBrowser\n        instanceId={props.instanceId}\n        files={files}\n        fileActions={myFileActions}\n        folderChain={folderChain}\n        onFileAction={handleFileAction}\n        thumbnailGenerator={(file: FileData) =>\n          file.thumbnailUrl ? `https://chonky.io${file.thumbnailUrl}` : null\n        }\n      >\n        <FileNavbar />\n        <FileToolbar />\n        <FileList />\n        <FileContextMenu />\n      </FileBrowser>\n    </div>\n  )\n}\n\nconst Dashboard: React.FC = () => {\n  const { jwt } = useSelector((state: any) => state.jwt)\n  const { client } = useSelector((state: any) => state.client)\n  const dispatch = useDispatch()\n\n  const [path, setPath] = useState('')\n\n  async function getKeysAtPrefix(prefix: string) {\n    let paths: string[] = []\n    if (prefix == '') {\n      await getUserStorageEntries(client, jwt).then((entries: StorageEntry[]) => {\n        paths = entries.map((entry: StorageEntry) => {\n          return entry.getKeyPath()\n        })\n      })\n    } else {\n      await getUserStorageEntries(client, jwt, prefix).then((entries: StorageEntry[]) => {\n        paths = entries.map((entry: StorageEntry) => {\n          return entry.getKeyPath()\n        })\n      })\n    }\n    return Promise.resolve(paths)\n  }\n\n  useEffect(() => {\n    if (jwt != '' && client != '') {\n      setPath('@')\n    }\n  }, [jwt, client])\n\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        <CCardBody>\n          <CRow>\n            <CCol sm={5}>\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\n                Storage Entries\n              </h4>\n            </CCol>\n          </CRow>\n        </CCardBody>\n        <CCardFooter>\n          <CRow className=\"text-center\">\n            <ReadOnlyVFSBrowser\n              instanceId=\"ah\"\n              path={path}\n              setPath={setPath}\n              getKeys={getKeysAtPrefix}\n            />\n          </CRow>\n        </CCardFooter>\n      </CCard>\n    </>\n  )\n}\n\nexport default Dashboard\n"],"names":["getPrefixFromPath","path","substring","indexOf","isDirectory","slice","setChonkyDefaults","iconComponent","ChonkyIconFA","getNewFiles","getFiles","prefix","files","then","keys","console","log","Array","from","map","key","id","name","keyNameFromPath","isDir","isHidden","Promise","resolve","getFolderChain","rootEntry","folderChain","start","end","entry","fullPath","unshift","lastIndex","lastIndexOf","useFileActionHandler","setPath","useCallback","data","ChonkyActions","payload","targetFile","myFileActions","defineFileAction","requiresSelection","button","toolbar","group","ReadOnlyVFSBrowser","props","useState","setFiles","setFolderChain","useEffect","chain","getKeys","updateFiles","updateFolderChain","handleFileAction","style","height","instanceId","fileActions","onFileAction","thumbnailGenerator","file","thumbnailUrl","jwt","useSelector","state","client","useDispatch","paths","getUserStorageEntries","entries","getKeyPath","className","sm"],"sourceRoot":""}